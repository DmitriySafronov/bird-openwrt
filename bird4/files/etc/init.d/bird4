#!/bin/sh /etc/rc.common
# Copyright (C) Eloi CarbÃ³ - 2014
# GSoC 2014 - "BGP/Bird integration with OpenWRT and QMP"

BIRD="bird4"
BIRD_CONFIG="/etc/$BIRD.conf"

START=99
STOP=10

SERVICE_DAEMONIZE=1
SERVICE_USE_PID=1
SERVICE_PID_FILE="/var/run/$BIRD.pid"

BIRD_BIN="/usr/sbin/$BIRD"

writeToConfig() {
                echo "$1" >> $BIRD_CONFIG
}

write() {
        [ -n "$2" ] && writeToConfig "$1"
}


write_bools() {
        [ "$2" == 0 ] && writeToConfig "#   $1;" || writeToConfig "    $1;"
}
#The name of the variable and the requested configuration must be the same
get() {
    config_get $1 $2 $1
}

prepare_global () {
	local section="$1"
    local logFile; local log; local debug; local id; local table

    #REMOVE OLD CONFIGURATION
    #rm -f "$BIRD_CONFIG"

    get logFile $section
    get log $section
    get debug $section
    get id $section
    get table $section

    echo "#Bird4 configuration using UCI:" > $BIRD_CONFIG
    writeToConfig " "
    [ -n $logFile -a -n $log ] && writeToConfig 'log "'$logFile'" '$log';'
    write "debug protocols $debug;" $debug
    writeToConfig " "
    writeToConfig "#Router ID"
    write "router id $id;" $id
    writeToConfig " "
    writeToConfig "#Secondary table"
    write "table $table;" $table
    writeToConfig " "
}

multipath_list() {
        write "          via $1" $1
}

multipath_weight_list() {
    local aw="$1"
    addr=`echo $aw | cut -d \: -f 1`
    weight=`echo $aw | cut -d \: -f 2`
    [ -n ${addr} -a -n ${weight} ] && write "          via ${addr} weight ${weight}"
}

prepare_routes() {
    local instance; local addr; local via; local type
    local section="$1"
    local protoInstance="$2"
    get instance $section

    if [ "$instance" = "$protoInstance" ]; then
        get type $section
        if [ "$type" = "general" ]; then
            get addr $section
            get via $section
            [ -n $addr -a -n $via ] && writeToConfig "    route $addr via $via;"
        elif [ "$type" = "special" ]; then
            get addr $section
            get attribute $section
            [ -n $addr -a -n $attribute ] && writeToConfig "    route $addr $attribute;"
        elif [ "$type" = "iface" ]; then
            get addr $section
            get iface $section
            [ -n $addr -a -n $iface ] && writeToConfig '    route '$addr' via "'$iface'";'
        elif [ "$type" = "multipath" ]; then
            get addr $section
            write "    route $addr multipath" $addr
            config_list_foreach $section via multipath_list
            config_list_foreach $section viaWeight multipath_weight_list
            writeToConfig "          ;"
        fi
    fi
}


prepare_neighbors() {
    local instance; local type; local addr; local as
    local section="$1"
    local protoType="$2"
    local protoInstance="$3"
    get instance $section
    get type $section

    if [ "$type" = "bgp" -a "$protoType" = "bgp" ]; then
        if [ "$instance" = "$protoInstance" ]; then
            get addr $section
            get as $section
            [ -n $addr -a -n $as ] && writeToConfig "    neighbor $addr as $as;"
        fi
    fi
}

primaryList() {
        local primary="$1"
        write "    primary $1;" $1
}

primaryIfaceList() {
    local ia="$1"
    iface=`echo $ia | cut -d \: -f 1`
    addr=`echo $ia | cut -d \: -f 2`
    [ -n ${iface} -a -n ${addr} ] && writeToConfig '    primary "'${iface}'" '${addr}';'
}

prepare_kernel() {
    local section="$1"
    local disabled
    get disabled $section
    if [ $disabled -eq 0 ]; then
        write "#$section configuration:" $section
        local table; local tablePriority; local import; local export; local scanTime; local persist; local learn;
        get table $section
        get import $section
        get export $section
        get scanTime $section
        get tablePriority $section
        get learn $section
        get persist $section
        writeToConfig "protocol kernel {"
        write "    table $table;" $table
        write "    kernel table $tablePriority;" $tablePriority
        write_bools learn $learn
        write_bools persist $persist
        write "    scan time $scanTime;" $scanTime
        write "    import $import;" $import
        write "    export $export;" $export
        writeToConfig "}"
        writeToConfig " "
    fi
}

prepare_static() {
    local section="$1"
    local disabled
    get disabled $section
    if [ $disabled -eq 0 ]; then
        local table
        get table $section
        writeToConfig "#$section configration:" $section
        writeToConfig "protocol static {"
        write "    table $table;" $table
        config_foreach prepare_routes 'route' $section
        writeToConfig "}"
        writeToConfig " "
    fi
}

prepare_device() {
    local disabled; local section="$1"
    get disabled $section
    if [ $disabled -eq 0 ]; then
        local scanTime
        get scanTime $section
        write "#$section configuration:" $section
        writeToConfig "protocol device {"
        write "    scan time $scanTime;" $scanTime
        config_list_foreach $section primary primaryList
        config_list_foreach $section primaryIface primaryIfaceList
        writeToConfig "}"
        writeToConfig " "
    fi
}

prepare_bgp() {
    local table; local import; local export; local as; local password
    local section="$1"
    get table $section
    get import $section
    get export $section
    get as $section

    write "#$section configuration:" $section
    writeToConfig "protocol bgp {"
    write "    table $table;" $table
    write "    local as $as;" $as
    write "    import $import;" $import
    write "    export $export;" $export
    config_foreach prepare_neighbors 'neighbor' 'bgp' $section
    writeToConfig "}"
    writeToConfig " "
}

start() {
    config_load bird4
    local useUCIconfig
    get useUCIconfig 'bird'

    if [ -z "$useUCIconfig" -o "$useUCIconfig" = "0" ]; then
        service_start $BIRD_BIN -d -c $BIRD_CONFIG -P $SERVICE_PID_FILE
    else
        #Set Bird4 configuration location:
        local UCIconfigFile
        get UCIconfigFile 'bird'
        BIRD_CONFIG=${UCIconfigFile:-/tmp/bird4.conf}

        #Setup the basic configuration
        prepare_global 'global'
        config_foreach prepare_kernel 'kernel'
        config_foreach prepare_static 'static'
        config_foreach prepare_device 'device'
#config_foreach prepare_direct 'direct'

        #Setup the protocols configuration (currently BGP only)
        config_foreach prepare_bgp 'bgp'

        #Start the service
        service_start $BIRD_BIN -d -c $BIRD_CONFIG -P $SERVICE_PID_FILE
    fi
}

stop() {
    service_stop $BIRD_BIN
}

restart() {
    stop
    start
}


reload() {
    service_reload $BIRD_BIN
}

