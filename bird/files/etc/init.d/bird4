#!/bin/sh /etc/rc.common
# Copyright (C) Eloi CarbÃ³ - 2014 
# GSoC 2014 - "BGP/Bird integration with OpenWRT and QMP"

BIRD="bird4"
BIRD_CONFIG="/etc/$BIRD.conf"

START=99
STOP=10

SERVICE_DAEMONIZE=1
SERVICE_USE_PID=1
SERVICE_PID_FILE="/var/run/$BIRD.pid"

BIRD_BIN="/usr/sbin/$BIRD"

writeToConfig() {
	        echo "$1" >> $BIRD_CONFIG
}

write() {
	[ -n "$2" ] && writeToConfig "$1"
}


write_bools() {
	[ "$2" == 0 ] && writeToConfig "#   $1;" || writeToConfig "    $1;"
}
#The name of the variable and the requested configuration must be the same
get() {
	        config_get $1 $2 $1
}

prepare_global () {
	local section="$1"
	local logFile; local log; local debug; local id; local table

	# REMOVE OLD CONFIGURATION
	#rm -f "$BIRD_CONFIG"
	
	get logFile $section
	get log $section
	get debug $section
	get id $section
	get table $section
	
	echo "#Bird4 configuration using UCI:" > $BIRD_CONFIG
	writeToConfig " "
	[ -n $logFile -a -n $log ] && writeToConfig 'log "'$logFile'" '$log';'
	write "debug protocols $debug;" $debug
	writeToConfig " "
	writeToConfig "#Router ID"
	write "router id $id;" $id
	writeToConfig " "
	writeToConfig "#Secondary table"
	write "table $table;" $table
	writeToConfig " "
}


multipath_list() {
	write "          via $1" $1
}

multipath_weight_list() {
	local aw="$1"
	addr=`echo $aw | cut -d \: -f 1`
	weight=`echo $aw | cut -d \: -f 2`
	[ -n ${addr} -a -n ${weight} ] && write "          via ${addr} weight ${weight}"
}

prepare_routes() {
	local instance; local addr; local via; local type
	local section="$1"
	local protoInstance="$2"
	get instance $section

	if [ "$instance" = "$protoInstance" ]; then
		get type $section
		if [ "$type" = "general" ]; then
			get addr $section
			get via $section
			[ -n $addr -a -n $via ] && writeToConfig "    route $addr via $via;"
		elif [ "$type" = "special" ]; then
			get addr $section
			get attribute $section
			[ -n $addr -a -n $attribute ] && writeToConfig "    route $addr $attribute;"
		elif [ "$type" = "iface" ]; then
			get addr $section
			get iface $section
			[ -n $addr -a -n $iface ] && writeToConfig '    route '$addr' via "'$iface'";'
		elif [ "$type" = "multipath" ]; then
			get addr $section
			write "    route $addr multipath" $addr
			config_list_foreach $section via multipath_list
			config_list_foreach $section viaWeight multipath_weight_list
			writeToConfig "          ;"
		fi
	fi
}


prepare_neighbors() {
	local instance; local addr; local as
	local section="$1"
	local protoInstance="$2"
	get instance $section
	
	if [ "$instance" = "$protoInstance" ]; then
		get addr $section
		get as $section
		[ -n $addr -a -n $as ] && writeToConfig "    neighbor $addr as $as;"
	fi
}

primaryList() {
	local primary="$1"
	write "    primary $1;" $1
}

primaryIfaceList() {
	local ia="$1"
	iface=`echo $ia | cut -d \: -f 1`
	addr=`echo $ia | cut -d \: -f 2`
	[ -n ${iface} -a -n ${addr} ] && writeToConfig '    primary "'${iface}'" '${addr}';'
}

prepare_protocol() {
	local type; local disabled
	local section="$1"
	get type $section
	get disabled $section
	if [ $disabled -eq 0 ]; then
		if [ "$type" = "kernel" ]; then
			local table; local tablePriority; local import; local export; local scanTime; local persist; local learn;
			get table $section
			get import $section
			get export $section
			get scanTime $section
			get tablePriority $section
			get learn $section
			get persist $section
	
			write "protocol $type {" $type
			write "    table $table;" $table
			write "    kernel table $tablePriority;" $tablePriority
			write_bools learn $learn
			write_bools persist $persist
			write "    scan time $scanTime;" $scanTime
			write "    import $import;" $import
			write "    export $export;" $export
			writeToConfig "}"
			writeToConfig " "
		elif [ "$type" = "device" ]; then
			local scanTime
			get scanTime $section
			
			write "protocol $type {" $type
			write "    scan time $scanTime;" $scanTime
			config_list_foreach $section primary primaryList
			config_list_foreach $section primaryIface primaryIfaceList
			writeToConfig "}"
			writeToConfig " "
		elif [ "$type" = "static" ]; then
			local instance; local table
			local section="$1"
			get instance $section
			get table $section
			
			write "protocol $type {" $type
			write "    table $table;" $table
			config_foreach prepare_routes 'route' $instance
			writeToConfig "}"
			writeToConfig " "
		elif [ "$type" = "bgp" ]; then
			local instance; local table; local import; local export; local as; local password
			local section="$1"
			get instance $section
			get table $section
			get import $section
			get export $section
			get as $section
			get password $section
			
			write "protocol $type {" $type
			write "    table $table;" $table
			write '    password "'$password'";' $password
			write "    local as $as;" $as
			write "    import $import;" $import
			write "    export $export;" $export
			config_foreach prepare_neighbors 'neighbor' $instance
			writeToConfig "}"
			writeToConfig " "
	fi
	fi
}

start() {
	config_load bird4
	local useUCIconfig
	get useUCIconfig 'bird'

	if [ -z "$useUCIconfig" -o "$useUCIconfig" = "0" ]; then
		service_start $BIRD_BIN -d -c $BIRD_CONFIG -P $SERVICE_PID_FILE
	else
		local UCIconfigFile
		get UCIconfigFile 'bird'
		BIRD_CONFIG=${UCIconfigFile:-/tmp/bird4.conf}
		prepare_global 'global'
    	config_foreach prepare_protocol 'protocol'
		service_start $BIRD_BIN -d -c $BIRD_CONFIG -P $SERVICE_PID_FILE
	fi
}

stop() {
	service_stop $BIRD_BIN
}

reload() {
	service_reload $BIRD_BIN
}
